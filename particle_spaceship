// This #include statement was automatically added by the Particle IDE.
#include <neopixel.h>


/* ======================= includes ================================= */

#include "application.h"
#include "neopixel/neopixel.h"

SYSTEM_MODE(AUTOMATIC);

/* ======================= prototypes =============================== */

void colorAll(uint32_t c, uint8_t wait);
void colorWipe(uint32_t c, uint8_t wait);
void rainbow(uint8_t wait);
void rainbowCycle(uint8_t wait);
uint32_t Wheel(byte WheelPos);

/* ======================= extra-examples.cpp ======================== */

// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_COUNT 3
#define PIXEL_PIN D4
#define PIXEL_TYPE WS2812B

// Settings
struct structSettings {
    //bool fade = 0;
    float hue = 0;
    float intensity = 1.0;
    int rgb[3] = {0, 200, 255};
    int timerVal = 10000;
    char share_code[9] = "DEADBEEF";
};

structSettings Settings;

// Parameter 1 = number of pixels in strip
// Parameter 2 = pin number (most are valid)
//               note: if not specified, D2 is selected for you.
// Parameter 3 = pixel type [ WS2812, WS2812B, WS2811, TM1803 ]
//               note: if not specified, WS2812B is selected for you.
//               note: RGB order is automatically applied to WS2811,
//                     WS2812/WS2812B/TM1803 is GRB order.
//
// 800 KHz bitstream 800 KHz bitstream (most NeoPixel products ...
//                         ... WS2812 (6-pin part)/WS2812B (4-pin part) )
//
// 400 KHz bitstream (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//                   (Radio Shack Tri-Color LED Strip - TM1803 driver
//                    NOTE: RS Tri-Color LED's are grouped in sets of 3)

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

void setup() {
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'

  Spark.function("color", color); // Expose the color function
}

void loop() {

}

// The function exposed in the spark API


int color(String command){

    handleParams(command);
    colorWipe(strip.Color(Settings.rgb[0], Settings.rgb[1], Settings.rgb[2]), 50);

    //if(command == "red"){
    //    colorWipe(strip.Color(Settings.rgb[0], Settings.rgb[1], Settings.rgb[2]), 50); // Red
    //}else if(command == "blue"){
    //    colorWipe(strip.Color(Settings.rgb[0], Settings.rgb[1], Settings.rgb[2]), 50);
    //}else if(command == "green"){
    //    colorWipe(strip.Color(Settings.rgb[0], Settings.rgb[1], Settings.rgb[2]), 50);
    //}else if(command == "rainbow"){
    //    rainbow(20);
    //}else if(command == "clear"){
    //     colorWipe(strip.Color(Settings.rgb[0], Settings.rgb[1], Settings.rgb[2]), 50);
    //}

}

int handleParams(String command)
{
  //look for the matching argument <-- max of 64 characters long
  int p = 0;
  bool setNewColor = false;

 //key1=value1,key2=value2
 //R=255.G=255.B=255

  while (p<(int)command.length()) {
    int i = command.indexOf(',',p);

    if (i<0) i = command.length();

    int j = command.indexOf('=',p);

    if (j<0) break;
    String key = command.substring(p,j).toUpperCase();
    String value = command.substring(j+1,i);
    int val = value.toInt();

    // Red
    if (key=="R") {
      Settings.rgb[0] = val;
      setNewColor = true;
    }

    // Green
    else if (key=="G") {
      Settings.rgb[1] = val;
      setNewColor = true;
    }

    // Blue
    else if (key=="B") {
      Settings.rgb[2] = val;
      setNewColor = true;
    }

    p = i+1;
  }

  //if (setNewColor) {
//      EFFECT_MODE = 0;
  //    b.allLedsOn(Settings.rgb[0], Settings.rgb[1], Settings.rgb[2]);
//      setNewColor = false;
  //    pubcolor();
//  }

  return 1;
}

// Set all pixels in the strip to a solid color, then wait (ms)
void colorAll(uint32_t c, uint8_t wait) {
  uint16_t i;

  for(i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
  }
  strip.show();
  delay(wait);
}

// Fill the dots one after the other with a color, wait (ms) after each one
void colorWipe(uint32_t c, uint8_t wait) {


  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Slightly different, this makes the rainbow equally distributed throughout, then wait (ms)
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
